Api gateway: entry point to access microservice. Clients will hit api gateway to access microservices


Services of api gateway: routing based on request headers,authentication, security,load balancing, ssl

routes :
route,predicate,filter
spring.cloud.gateway.routes[0].id=<service-name>
spring.cloud.gateway.routes[0].uri=lb://<servicesname>
spring.cloud.gateway.routes[0].predicate[0]=Path=/quiz/**

dependency : spring-cloud-starter-gateway



@EnableCircuitBreaker
circuit breaker: set of states maintained in application. Open(calls will not be served) , closed, half open. 
dependecy for circuit breaker: reslience4j
management.health.circuitbreaker.enabled=true
management.endpoints.web.exposure.include=*


fallbackmethod: In case dependant service is down and to send back appropriate response 
@TimeLimiter: for handling timeouts within micro services. For example if inventory service is down then order service will timeout 
after certain period

Distributed tracing: traceid: unique identifier that comes into the system. 
span id: when request goes accross multiple services. Then at each service we call it spanid.
multiple spain ids form traceid

distributed tracing dependencies: sleuth and zipkin

management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability=1.0


Promotheus: store all the metrics from spring boot app into in memory database. Polls actuator endpoint
every x seconds
Grafana: Polls promotheus every x seconds. Visualise metrics using graphana

management.endpoints.web.exposure.include=promotheus
end point: actuator/promotheus

Saga Pattern:  choreography, orchestration

choreography:
In the choreography example, each service listens to events and acts accordingly. 
The services are decoupled and communicate via an event bus. 
This allows for independent scaling and loose coupling but can lead to complex event chains and difficulty in tracing the flow.

In the orchestration example, a central orchestrator (BookingOrchestratorService) handles the entire booking process, 
calling each service in turn. This simplifies the workflow management and 
error handling but introduces a single point of failure and tighter coupling between the orchestrator and services.


@EnableEurekaClient: To enable a microservice to register itself as eureka client during service discover;
@EnableEurekaServer: To enable discovery services for client to register. 


===============api-gateway=========================
 api gateway is used for providing routing,security,cirtcuit breaking,etc
spring.cloud.gateway.discovery.locator.enabled=true//allowing api gateway to locate services based on
routing
spring.cloud.gateway.discovery.locator.lower-case-service-id=true//to accept service name in lower case in rest api
@EnableEurekaClient: To register the app/service in eureka server's service registry
configure discovery server(ex: eureka) details in app.properties

spring.cloud.gateway.routes.id=id of the service
uri: uri of the service
predicate: path (to forward request based on matching patterns in path)
